def suma(num1,num2):
    """
    sumnany: suma de dos numeros enteros
    args:
    num1(int)
    num2(int)
    return:
    int:la suma de dos numeros enteros
    """
    return num1+num2
    

resultado= suma(3,5)
print(resultado)   
print(suma.__doc__)
print(help(suma))



class Usuario:
    #Atributos de calse
    username="alejo"
    email="alejoo_97@hotmail.com"

#para acceder al valor de l atributo "username" lo hago a traves de la clase (mediante el .)
print(Usuario.username)
print(Usuario.email)    
#modificar el atributo
Usuario.username="alejo riel"
print(Usuario.username)


---------------------

#Declaramos metodos a nuestras clases:
class Usuario:
    #Por convencion se llama "self" y hace referencia al objeto
    def inicializar(self, username,email):
        self.username= username
        self.email= email

user_1=Usuario()
user_2=Usuario()
#print(user_1.__dict__)
#print(user_2.__dict__)

#enumera la funcion
#user_1.inicializar()
#user_2.inicializar()
#muestra la funcion inicial(def inicializar)
#print(user_1.__dict__)
#print(user_2.__dict__)

user_1.inicializar("alejo","alejoo_96@hotmail.com")
user_2.inicializar("cfp","cfp@hotmail.com")
print(user_1.__dict__)
print(user_2.__dict__)

-----------------------------------------------------------
class Usuario:
#TODO:__init__
   def __init__(self, username="usariodefault", password="12344"):
    self.username=username
    self.password=password

user_1=Usuario ("roberto", "12345")
user_2=Usuario("nestor", "54312")
user_3=Usuario("delfina","milanesa")
user_4=Usuario()
user_5=Usuario()
print(user_1.__dict__)
print(user_2.__dict__)
print(user_3.__dict__)
print(user_4.__dict__)
print(user_5.__dict__)

print(id(user_4))
print(id(user_5))

----------------------------------------------------------------------
#ejemplo integrador de POO en python
#Creacion de clase Personaje
class Personaje: #clase padre
    #constructor
    def __init__(self, nombre, fuerza, inteligencia, defensa, vida):
        self.nombre= nombre
        self.fuerza= fuerza
        self.inteligencia= inteligencia
        self.defensa= defensa
        self.vida= vida
#metodo que me permite mostrar todos los atributos de mi personaje
    def atributos(self):
        print("nombre:", self.nombre)
        print("fuerza:", self.fuerza)
        print("inteligenca:", self.inteligencia)
        print("defensa:", self.defensa)
        print("vida:", self.vida)
#metodo que nos permite subir de nivel  
    def subir_nivel(self, fuerza, inteligencia, defensa, vida):
        self.fuerza = self.fuerza + fuerza
        self.inteligencia = self.inteligencia +inteligencia
        self.defensa = self.defensa + defensa
        self.vida = self.vida + defensa
    #metodo que determina si el personaje esta vivo o no 
    def esta_vivo(self):
        return self.vida > 0 
    
    #metodo morir
    def morir(self):
        self.vida= 0 
        print(f"{self.nombre} esta muerto.")
    #metodo daño()
    def daño(self,enemigo):
        return self.fuerza - enemigo.defensa   
        #return f"el daño causado por {self.nombre} es de {self.fuerza - enemigo.defesa} al rival {enemigo.nombre}" 
#metodo atacar()
    def atacar(self,enemigo):
        daño=self.daño(enemigo)
        enemigo.vida = enemigo.vida + daño
        print(f"{self.nombre} a realizado {daño} puntos de daño al rival {enemigo.nombre}")
        if enemigo.esta_vivo():
            print(f"La vida de {enemigo.nombre} es de {enemigo.vida}")
        else:
            enemigo.morir()
#instanciar un objeto de la clase personaje     
#aquiles = Personaje("Aquiles",50, 145, 180, 800)
#aquiles.atributos()

#print("\nsubir Nivel")
#Llamo a mi metodo subir_nivel
#aquiles.subir_nivel(100,20,30,100)
 
#Llamado a mis atributos
#aquiles.atributos()

#Llamado al metodo esta vivo ()
#print(aquiles.esta_vivo())
#aquiles.morir()
#aquiles.atributos()

#print("\nenemigo")

#creando enemigo
#hector= Personaje("Hector", 50, 120, 180,600)
#hector.atributos()

#metodo daño()
#print(aquiles.daño(hector))
#print(aquiles.atacar(hector))
#print("\natributos despues del ataque")
#hector.atributos()



#HERENCIA
class Guerrero(Personaje): #clase hija
    def __init__(self, nombre, fuerza, inteligencia, defensa, vida, nivel, espada):
        super().__init__(nombre, fuerza, inteligencia, defensa, vida)
        self.espada= espada

#metodo que nos permite modificar el daño dependiando el tipo de espada.
    def cambiar_arma(self):
        tipo_arma= int(input("""seleccione el tipo de arama:
                            1_doran - daño 12
                            2_filo infinito - daño 70
                            3-sanguinaria - daño 80
                            """   ))
#logica al elegir el arma:
        if tipo_arma==1:
            self.espada=12
        elif tipo_arma==2:
            self.espada==70
        elif tipo_arma==3:
            self.espada= 80
        else:
            print("opcion no valida")
      #sobreescribimos el metodo atributos() para muestre el daño de la espada     
    def atributos(self):
        super().atributos()
        print(f"espada:{self.espada}")
  #sobreescribimos el metodo daño() ya que como incorporamos un accesorio al guerrero este provoca mas daño      
    def daño(self,enemigo):
        return self.fuerza +self.espada - enemigo.defensa 
    
#prise= Guerrero("Prise",100,150,80,700)
#prise.atributos()      


#ejecuto el metodo cambiar_carma() y vuelvo  a llamr a mis atributos
#prise.cambiar_arma()
#prise.atributos()  

#simulacion pelea       
facundo=Personaje("Facundo",60,120,40,550)
alejo= Guerrero("Alejo",65,110,45,600,5)
alejo.cambiar_arma()

#combate
print(alejo.daño(facundo))

______________________________________________________________________________________________________________
#TODO: POO
#Nombre de la clase: Siempre va en mayuscula y en singular,
class Animal:
    #Metodo Inicializar(__init__) que se encarga de inicializar los objetos nuevos de la clase Animal,  
    def __init__(self,nombre, especie, habitat):
        self.nombre=nombre
        self.especie=especie
        self.habitat=habitat
    #Metodo __str__:Convierte el lenguaje de objetos de string(texto),recibe un solo parametro(self):Resumen de como se ve el objeto
    
    def __str__(self):
        return f"{self.nombre} {self.especie} {self.habitat}"

    #GET:Obtener(por convencion el metodod get que sea se debe llamar getNombreFuncion)    
    def get_nombre(self):
        return self.nombre

    def get_especie(self):
        return self.especie    
    
    #Metodo:Set:Modificacion
    def set_nombre(self,nombre):
        self.nombre= nombre

    def set_especie(self,especie):
        self.especie=especie

    def set_habitat(self,habitat):
        self.habitat=habitat

#Instanciar objeto animal         
perro=Animal("Coraje", "canino", "Terrestre")
print(perro)    
#Get
print(perro.get_nombre())
print(perro.get_especie())
#Set
perro.set_nombre("coraje el perro cobarde")
print(perro)

perro.set_especie("chico")
perro.set_habitat("Selva")
print(perro)

____________________________________________________________________________

class Vehiculo:
    def __init__(self,tipo, tripulado, fabricante):
        self.tipo=tipo
        self.tripulado= tripulado
        self.fabricante=fabricante
    
    def get_tipo(self):
        return self.tipo
    
    def get_tripulado(self):
        return self.tripulado
    
    def get_fabricante(self):
        return self.fabricante
    
    def __str__(self):
        return self.tipo
    
class Avion(Vehiculo):
    def __init__(self, tipo, tripulado, fabricante, turbinas, alas):
            super().__init__(tipo, tripulado, fabricante)
            self.turbinas=turbinas
            self.alas=alas    
        
    def __str__(self):
            return self.alas

dron=Vehiculo("Aereo", False, "Dell")
print(dron)
b_737= Avion("Aereo", True, "Boening", 2, "Viva")
print(b_737)
