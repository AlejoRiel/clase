"""
    Consigna: Crear un sistema de gestión de estudiantes.

Crea una clase base llamada "Estudiante" con los siguientes atributos:

nombre: una cadena para almacenar el nombre del estudiante.
edad: un número entero para almacenar la edad del estudiante.
Además, implementa un método llamado "es_mayor_de_edad" que verifique si el estudiante es mayor de edad. 
Este método debe devolver True si el estudiante tiene 18 años o más, y False en caso contrario.

Crea una clase derivada llamada "EstudianteUniversitario" que herede de la clase "Estudiante". 
Esta clase debe tener dos atributos adicionales:

carrera: una cadena para almacenar la carrera universitaria del estudiante.
semestre: un número entero para almacenar el semestre en el que se encuentra el estudiante.
Sobreescríbe el método "es_mayor_de_edad" para incluir una condición adicional: 
si el estudiante es menor de edad pero se encuentra en el tercer semestre o superior, 
se considerará como mayor de edad.

Crea otra clase derivada llamada "EstudianteSecundario" que herede de la clase "Estudiante". 
Esta clase debe tener un atributo adicional:

colegio: una cadena para almacenar el nombre del colegio secundario del estudiante.
Sobreescríbe el método "es_mayor_de_edad" para que siempre devuelva False, 
ya que los estudiantes secundarios son menores de edad.

Crea instancias de las clases "EstudianteUniversitario" y "EstudianteSecundario" y muestra 
la información de cada estudiante, incluyendo su nombre, edad y si es mayor de edad según 
la lógica implementada en cada clase.
"""


class Estudiante:
    def __init__(self, nombre, edad):
        self.nombre = nombre
        self.edad = edad
    
    def es_mayor_de_edad(self):
        if self.edad>=18:
            return True            
        else:
            return False

    def mostrar_atributos(self):
        print(f"Nombre :{self.nombre}")
        print(f"Edad:{self.edad}")
        

class EstudianteUniversitario(Estudiante):
    def __init__(self,nombre , edad, carrera, semestre):
        super().__init__(nombre, edad)
        self.carrera = carrera
        self.semestre=semestre
             
    def es_mayor_de_edad(self):
        if super().es_mayor_de_edad() or self.semestre>=3:
            return True
        else:
            return False
        
    def atributos(self):
        super().atributos()
        print(f"carrera:{self.carrera}")
        print(f"semetres{self.semestre}")
       
     
class EstudianteSecundario(Estudiante):
    def __init__(self,nombre , edad, carrera, semestre, colegio):   
        super().__init__(nombre, edad)
        self.colegio=colegio
        
        
    def

-------------------------------------------------------------------------------
#TODO: herencia multiple:cuando se habla de herencia multiple, quiere decirque la clase Hija se construye a partir de mas de una clase Principal, a su vez la clase HIJA hereda los atributod y metodos de ambas clase.
#class animalAereo:
#    def comer(slef):
#        print("El animal aereo esta comiendo")

#    def volar(self):
#        print("Volando")

#class animalTerrestre:
#    def comer(self):
#        print("El animal terrestre esta comiendo")

#    def caminar(self):
#        print("caminando")    

#class Pajaro(animalAereo,animalTerrestre):
#    pass

#pato= Pajaro()
#pato.volar()
#pato.comer()

#TODO: Esto suceda por que Python, al encontrarse con metodos con el mismo nombre en diferentes clases Padres, va usar los metodos correspondientes a la primera clase Padre Definida. A esto se lo conoce como MRO, de las siglas en ingles para "Orden de resolucion de metodos".


#-------------------------------------------------------------------------------
# TODO: En python, ademas de la Herencia multiple, podemos encontrarnos tambien con Herencia multinivel. Este tipo de Herencia hace referencia a clases Hijas que son derivadas de una clase Padre, que a su vez es derivada de ot5ra clase Padre.

class Persona:
    def __init__(self, nombre, apellido, edad):
        self.nombre= nombre
        self.apellido= apellido
        self.edad= edad
        self.documento_identidad= None

    def agregar_documento_identidad(self,numero_documento):
        self.documento_identidad= numero_documento
        print("documento guardado con exito")

    def ejecutar_accion(self):
        print("Realizando una tarea")

class Deportista(Persona):
    def __init__(self, nombre, apellido, edad,deporte):
        super().__init__(nombre, apellido, edad)                
        self.deporte= deporte

    def ejecutar_accion(self):
        super().ejecutar_accion()
        print(f"Practicando {self.deporte}")
        

class Ciclista(Deportista):
    def __init__(self, nombre, apellido, edad):
        self.deporte="ciclismo"
        super().__init__(nombre, apellido, edad,self.deporte)

    def pedalear(self):
        print("Pedaleando")


alejo=Ciclista("Alejo", "Riel", 25)
alejo.ejecutar_accion()
alejo.agregar_documento_identidad(40323432)
print(alejo.documento_identidad)
